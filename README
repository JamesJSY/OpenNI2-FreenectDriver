FreenectDriver is a bridge to libfreenect implemented as an OpenNI2 driver.
It allows use of Kinect hardware as supported by libfreenect.
FreenectDriver is available under the Apache 2 license; copyright information appears in src/DeviceDriver.cpp and LICENSE.

	dependencies:
g++
python
libfreenect

	build:
./waf configure build

	install:
Copy build/libFreenectDriver.so to OpenNI2/Drivers/ in your OpenNI2 redist directory.


	structure:
This driver is modeled on TestDevice.cpp and Drivers/Kinect/
In the FreenectDriver namespace, it ties together the C++ interfaces of OpenNI2 and libfreenect using multiple inheritance.

FreenectDriver inherits publically from DriverBase and privately from Freenect::Freenect.
A custom libfreenect.hpp allows protected access to the Freenect context, so that FreenectDriver can call the Freenect's C API.
As a DriverBase, FreenectDriver manages devices and sets up device state callbacks.

FreenectDeviceNI inherits publically from DeviceBase and Freenect::FreenectDevice.
Because of this, it can be built by Freenect::Freenect::createDevice() and it can define FreenectDevice's depth and video callbacks.
Those callbacks trigger acquireFrame() in FreenectStream.

FreenectStream is a virtual base class inheriting from StreamBase.
It does generic frame setup in acquireFrame() and then calls pure virtual buildFrame() to let derived classes finish the frame.
It also provides the base skeleton for setting and getting properties, which cascades down the inheritance tree.

FreenectVideoStream is another virtual base that extends FreenectStream to be specific to visual data.

FreenectDepthStream and FreenectColorStream are nearly identical in definition and implementation, both inheriting from FreenectVideoStream.
They differ mostly in the formats they use to process data and the video modes they support.
These two implementations offer a system to store and report supported video modes.
To implement a new mode, simply add it to getSupportedVideoModes() and modify populateFrame() if necessary.


	todo:
Gentoo ebuilds
PROPER LOGGING!
support more FREENECT_RESOLUTION_, FREENECT_VIDEO_, and FREENECT_DEPTH_
provide more OniVideoMode and OniStreamProperty
implement remaining derived functions
